I"HG<h2 id="problem"><strong>Problem</strong></h2>
<p><a href="https://www.hackerrank.com/challenges/sherlock-and-anagrams/problem?isFullScreen=true&amp;h_l=interview&amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;playlist_slugs%5B%5D=dictionaries-hashmaps">Sherlock and Anagrams</a></p>

<p><br /></p>

<p><strong>[원문]</strong></p>

<p>Two strings are anagrams of each other if the letters of one string can be rearranged to form the other string. Given a string, find the number of pairs of substrings of the string that are anagrams of each other.</p>

<p><strong>Example</strong></p>

<p>s = mom</p>

<p>The list of all anagrammatic pairs is [m,m], [mo,om] at positions [[0],[2]], [[0,1],[1,2]]  respectively.</p>

<p><strong>Function Description</strong></p>

<p>Complete the function sherlockAndAnagrams in the editor below.</p>

<p>sherlockAndAnagrams has the following parameter(s):</p>

<ul>
  <li>string s: a string</li>
</ul>

<p><strong>Returns</strong></p>

<ul>
  <li>int: the number of unordered anagrammatic pairs of substrings in <em>s</em></li>
</ul>

<p><strong>Input Format</strong></p>

<p>The first line contains an integer <em>q</em>, the number of queries.
Each of the next <em>q</em> lines contains a string <em>s</em> to analyze.</p>

<p><strong>Constraints</strong></p>

<ul>
  <li>1 &lt;= q &lt;= 10</li>
  <li>2 &lt;= length of s &lt;= 100</li>
</ul>

<p><em>s</em> contains only lowercase letters in the range ascii[a-z].</p>

<p><strong>Sample Input 0</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
abba
abcd
</code></pre></div></div>

<p><strong>Sample Output 0</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4
0
</code></pre></div></div>

<p><strong>Explanation 0</strong></p>

<p>The list of all anagrammatic pairs is [a,a], [ab,ba], [b,b] and [abb,bba] at positions [[0],[3]], [[0,1],[2,3]], [[1],[2]] and [[0,1,2],[1,2,3]] respectively.</p>

<p>No anagrammatic pairs exist in the second query as no character repeats.</p>

<p><strong>Sample Input 1</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
ifailuhkqq
kkkk
</code></pre></div></div>

<p><strong>Sample Output 1</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
10
</code></pre></div></div>

<p><strong>Explanation 1</strong></p>

<p>For the first query, we have anagram pairs [i,i], [q,q] and [ifa,fai] at positions [[0],[3]], [[8],[9]] and [[0,1,2],[1,2,3]] respectively.</p>

<p>For the second query:
There are 6 anagrams of the form [k,k] at positions [[0],[1]], [[0],[2]], [[0],[3]], [[1],[2]], [[1],[3]] and [[2],[3]].
There are 3 anagrams of the form [kk,kk] at positions [[0,1],[1,2]], [[0,1],[2,3]] and [[1,2],[2,3]].
There is 1 anagram of the form [kkk,kkk] at position [[0,1,2],[1,2,3]].</p>

<p><strong>Sample Input 2</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
cdcd
</code></pre></div></div>

<p><strong>Sample Output 2</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
</code></pre></div></div>

<p><strong>Explanation 2</strong></p>

<p>There are two anagrammatic pairs of length 1:[c,c] and [d,d].
There are three anagrammatic pairs of length 2:[cd,dc], [cd,cd], [dc,cd] at positions [[0,1],[1,2]], [[0,1],[2,3]], [[1,2],[2,3]] respectively.</p>

<h2 id="초기-code"><strong>초기 Code</strong></h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/bin/python3
</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="c1">#
# Complete the 'sherlockAndAnagrams' function below.
#
# The function is expected to return an INTEGER.
# The function accepts STRING s as parameter.
#
</span>
<span class="k">def</span> <span class="nf">isAnagram</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">s1</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">s2</span><span class="p">)):</span>
        <span class="k">return</span> <span class="bp">False</span>
    
    <span class="n">dic1</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="nb">list</span><span class="p">(</span><span class="n">s1</span><span class="p">).</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">s1</span><span class="p">)}</span>
    <span class="n">dic2</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span><span class="nb">list</span><span class="p">(</span><span class="n">s2</span><span class="p">).</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">s2</span><span class="p">)}</span>
        
    <span class="k">if</span> <span class="n">dic1</span> <span class="o">==</span> <span class="n">dic2</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>
    
<span class="k">def</span> <span class="nf">sherlockAndAnagrams</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">win_size</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">start</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
        <span class="k">while</span> <span class="n">win_size</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="n">target</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">start</span><span class="o">+</span><span class="n">win_size</span><span class="p">]</span>
            <span class="n">candidates</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="n">win_size</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="n">win_size</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">isAnagram</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
                    <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">win_size</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">win_size</span> <span class="o">=</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">ans</span>
                

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'OUTPUT_PATH'</span><span class="p">],</span> <span class="s">'w'</span><span class="p">)</span>

    <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">q_itr</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>

        <span class="n">result</span> <span class="o">=</span> <span class="n">sherlockAndAnagrams</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

        <span class="n">fptr</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

    <span class="n">fptr</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="notes"><strong>Notes</strong></h2>

<p>힘들게 최초의 코드를 짯으나, 아마 전체적으로 시간 복잡도의 문제가 발생하는거 같다 (colab 상에서 돌려보면 답은 다 맞는데, Hackerrank에서는 TLE가 뜨는 걸로 보아).
그래서 좀 더 스마트한 다른 사람의 코드를 분석해보고자 한다.</p>

<h2 id="최종-code"><strong>최종 Code</strong></h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">#!/bin/python3
</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="c1">#
# Complete the 'sherlockAndAnagrams' function below.
#
# The function is expected to return an INTEGER.
# The function accepts STRING s as parameter.
#
</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>

<span class="k">def</span> <span class="nf">sherlockAndAnagrams</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">arr</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span> <span class="c1"># window size
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span> <span class="c1"># start position
</span>            <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="p">])))</span>
    
    <span class="n">count</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span><span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">Counter</span><span class="p">(</span><span class="n">arr</span><span class="p">).</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">}</span>

    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">count</span><span class="p">.</span><span class="n">values</span><span class="p">()):</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">ans</span>
                

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">fptr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'OUTPUT_PATH'</span><span class="p">],</span> <span class="s">'w'</span><span class="p">)</span>

    <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">q_itr</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>

        <span class="n">result</span> <span class="o">=</span> <span class="n">sherlockAndAnagrams</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

        <span class="n">fptr</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

    <span class="n">fptr</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

</code></pre></div></div>

<h2 id="notes-1"><strong>Notes</strong></h2>

<p>위 코드는 돌아다니는 python 코드중 가장 직관적으로 이해가 된 것을, 내가 이해하기 편하도록 변형해서 작성해본 코드이다. 우선 주어진 s를 토대로 만들 수 있는 모든 substring을 모아놓은 list를 만드는 부분은 내가 생각한 것과 동일했다.</p>

<p>하지만, 한 가지 이 문제에서 핵심적으로 생각해야 하는 것은, 내가 isAnagram() 함수를 만드느라 고생했던 부분에서 두 string간의 dictionary를 만들어서 각 구성요소가 같은 횟수로 사용되었는지 확인하기 보다, 각 string을 sort한 다음 같은지를 판단하는게 훨씬 효율적이라는 것이다. (그래서 sorted()를 사용한 것)</p>

<p>그 다음으로, collections library에서 제공하는 Counter 함수를 사용하면 주어진 list의 원소가 몇번 count되는지를 너무나도 편리하게 알 수 있다… (왜 여태까지 몰랐을까…)</p>

<p>그래서 만들어진 count는 각 substring별로 1회 이상 사용된 것만 filter한 결과물이다.</p>

<p>이제 가장 쉬운 과정만 남았다. list(count.values())를 출력해보면, 2회 이상 사용된 substring별로 몇번 관측되었는지 결과가 나오는데, 여기서 range(i)를 해주면 가령, 4에 대해서 6(3+2+1+0)으로 mapping 되어야 하는데, 이를 ans += sum(range(4))같은 방식으로 대체할 수 있다.</p>

<p><br /><br /></p>

<script type="text/javascript" src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" data-name="bmc-button" data-slug="ybkim95" data-color="#FFDD00" data-emoji="" data-font="Comic" data-text="Buy me a coffee" data-outline-color="#000000" data-font-color="#000000" data-coffee-color="#ffffff"></script>

:ET